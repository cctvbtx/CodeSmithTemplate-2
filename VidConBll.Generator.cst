<%@ Template Language="C#" OutputType="None" TargetLanguage="Text" %>

<%-- 加载访问数据库的组件SchemaExplorer,并声明其使用的命名空间 --%>
<%@ Assembly Name="SchemaExplorer"%>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.IO"%>
<%-- 数据库 --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. GettingStarted - Required" Description="Database that the tables views, and storedprocedures should be based on. IMPORTANT!!! If SourceTables and SourceViews areleft blank, the Entire Database will then be generated."%>

<%@ Register Name="EntityTemplate" Template="VidConBll.Generator.Template.cst" MergeProperties="Flase" ExcludeProperties=""%>


<script runat="template">
    //解决方案输出路径
private string Directory = String.Empty;    
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
    { 
        get
        {
            return Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length -1);
            Directory = value;
        } 
    }
</script>


<script runat="template">

    //生成实体类文件
private void GenerateEntityClasses()
    {
        CodeTemplate Template =new EntityTemplate();
        foreach(TableSchema table in this.SourceDatabase.Tables)
        {
            if(table.Name!="OperationLog")//操作日志表的业务逻辑层单独处理
            {
            string FileDirectory = OutputDirectory +"\\"+ table.Name +"Bll.cs";
            //生成模板
            Template.SetProperty("Table",table);
            Template.SetProperty("DeveloperName","MengXianzhi");
            //文件输出
                if(!File.Exists(FileDirectory))
            Template.RenderToFile(FileDirectory,true);
            }
        }
    }
</script>

<%
//运行主方法
this.GenerateEntityClasses();
%>